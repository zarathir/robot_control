// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class RobotNode {
  Future<void> nodeHandle({dynamic hint});

  Future<void> publishTwist(
      {required String topic,
      required Vector3 linear,
      required Vector3 angular,
      dynamic hint});
}

class Vector3 {
  final double x;
  final double y;
  final double z;

  Vector3({
    required this.x,
    required this.y,
    required this.z,
  });
}

class RobotNodeImpl extends FlutterRustBridgeBase<RobotNodeWire>
    implements RobotNode {
  factory RobotNodeImpl(ffi.DynamicLibrary dylib) =>
      RobotNodeImpl.raw(RobotNodeWire(dylib));

  RobotNodeImpl.raw(RobotNodeWire inner) : super(inner);

  Future<void> nodeHandle({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_node_handle(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "node_handle",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> publishTwist(
          {required String topic,
          required Vector3 linear,
          required Vector3 angular,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_publish_twist(
            port_,
            _api2wire_String(topic),
            _api2wire_box_autoadd_vector_3(linear),
            _api2wire_box_autoadd_vector_3(angular)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "publish_twist",
          argNames: ["topic", "linear", "angular"],
        ),
        argValues: [topic, linear, angular],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_Vector3> _api2wire_box_autoadd_vector_3(Vector3 raw) {
    final ptr = inner.new_box_autoadd_vector_3();
    _api_fill_to_wire_vector_3(raw, ptr.ref);
    return ptr;
  }

  double _api2wire_f64(double raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_vector_3(
      Vector3 apiObj, ffi.Pointer<wire_Vector3> wireObj) {
    _api_fill_to_wire_vector_3(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_vector_3(Vector3 apiObj, wire_Vector3 wireObj) {
    wireObj.x = _api2wire_f64(apiObj.x);
    wireObj.y = _api2wire_f64(apiObj.y);
    wireObj.z = _api2wire_f64(apiObj.z);
  }
}

// Section: wire2api
void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RobotNodeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RobotNodeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RobotNodeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_node_handle(
    int port_,
  ) {
    return _wire_node_handle(
      port_,
    );
  }

  late final _wire_node_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_node_handle');
  late final _wire_node_handle =
      _wire_node_handlePtr.asFunction<void Function(int)>();

  void wire_publish_twist(
    int port_,
    ffi.Pointer<wire_uint_8_list> topic,
    ffi.Pointer<wire_Vector3> linear,
    ffi.Pointer<wire_Vector3> angular,
  ) {
    return _wire_publish_twist(
      port_,
      topic,
      linear,
      angular,
    );
  }

  late final _wire_publish_twistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Vector3>,
              ffi.Pointer<wire_Vector3>)>>('wire_publish_twist');
  late final _wire_publish_twist = _wire_publish_twistPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_Vector3>, ffi.Pointer<wire_Vector3>)>();

  ffi.Pointer<wire_Vector3> new_box_autoadd_vector_3() {
    return _new_box_autoadd_vector_3();
  }

  late final _new_box_autoadd_vector_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Vector3> Function()>>(
          'new_box_autoadd_vector_3');
  late final _new_box_autoadd_vector_3 = _new_box_autoadd_vector_3Ptr
      .asFunction<ffi.Pointer<wire_Vector3> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Vector3 extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double z;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
